name: deploy

on:
  push:
    branches: [ main ]

jobs:
  copy_project_on_server:
    name: Copy project on server
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create archive with project
        run: |
          mkdir ../NetworkParserProd
          cp -TR . ../NetworkParserProd
          tar -cvf networkparser.tar ../NetworkParserProd/

      - name: Copy archive to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_KEY }}
          source: "networkparser.tar"
          target: "/home/projects/"

  run_parser_in_docker:
    name: Run network parser
    runs-on: ubuntu-latest
    needs: copy_project_on_server
    if: github.ref_name == 'main'
    steps:
      - name: Run docker compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_KEY }}
          script: |
            cd /home/projects/
            docker compose -f NetworkParserProd/parser_infra/docker-compose.yaml down
            docker image rm network_parser_image
            tar -xf networkparser.tar && rm networkparser.tar
            rm -f NetworkParserProd/.env && touch NetworkParserProd/.env
            echo SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} >> NetworkParserProd/.env
            docker compose -f NetworkParserProd/parser_infra/docker-compose.yaml up -d --build

  send_message:
    runs-on: ubuntu-latest
    needs: run_parser_in_docker
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} NetworkParser успешно выполнен!
